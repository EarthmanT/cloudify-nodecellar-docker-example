tosca_definitions_version: cloudify_dsl_1_0

imports:
  - http://www.getcloudify.org/spec/cloudify/3.2m4/types.yaml
  - http://www.getcloudify.org/spec/docker-plugin/1.2m4/plugin.yaml

################################################################
# Blueprint inputs
# 
# The values are provided via the inputs.json file.
# passed when creating the deployment (-i inputs.json).
################################################################

inputs:

    host_ip:
        description: >
          The ip of the host the application will be deployed on  
        default: 127.0.0.1

    agent_user:
        description: >
          User name used when SSH-ing into the started machine
        default: ubuntu

    agent_private_key_path:
        description: >
          Path to a private key that resided on the management machine.
          SSH-ing into agent machines will be done with this key.
        default: ~/.ssh/agent_key.pem

    install_agent: 
        description: > 
          When running in local mode set this to false
        default: false

    web_port:
        description: >
          Which port you want to map the web port to.
        default: 8080
    
    mongo_port:
        description: >
          Which port you want to map the mongo port to.
        default: 27017
    
    web_status_port:
        description: >
          Which port for the mongo web status page.
        default: 28017

node_templates:

  host:
    type: cloudify.nodes.Compute
    properties:
      install_agent: { get_input: install_agent }
      ip: { get_input: host_ip }
      cloudify_agent:
        user: { get_input: agent_user }
        key: { get_input: agent_private_key_path }

  nodecellar_container:
    type: cloudify.docker.Container
    properties:
      name: nodecellar
      image:
        repository: uric/nodecellar
      ports:
        8080: { get_input: web_port }
      params:
        stdin_open: true
        tty: true
        command: nodejs server.js
        links:
           mongod: { get_attribute: [ mongod_container, container_id ] }
        environment:
          NODECELLAR_PORT: { get_input: web_port }
          MONGO_PORT: { get_input: mongo_port }
          MONGO_HOST: { get_property: [ mongod_container, name ] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: host
      - type: cloudify.relationships.connected_to
        target: mongod_container

  mongod_container:
    type: cloudify.docker.Container
    properties:
      name: mongod
      image:
        repository: dockerfile/mongodb
      ports:
        27017: { get_input: mongo_port }
        28017: { get_input: web_status_port }
      params:
        stdin_open: true
        tty: true
        command: mongod --rest --httpinterface --smallfiles
    relationships:
      - type: cloudify.relationships.contained_in
        target: host

outputs:
  endpoint:
    description: Web application endpoint
    value:
      ip_address: { get_attribute: [ host, ip ] }
      port: { get_input: web_port }
